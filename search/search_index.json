{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"conclusion/","title":"Related Sessions at Cisco Live","text":""},{"location":"conclusion/#related-sessions-at-cisco-live","title":"Related Sessions at Cisco Live","text":"<p>Walk-In Labs</p> <ul> <li>LABCCT-2007 Cisco Cloud APIs on Webex Contact Center (WxCC)</li> <li>LABCCT-2013 Facebook Messenger and WhatsApp Integration Using Webex Connect for Contact Center Enterprise</li> <li>LABCCT-2014 Improving the Unified Contact Center Express Migration - Skill Queueing in Webex Contact Center</li> <li>LABCCT-2016 Autonomous Webex AI Agent functionalities in Webex Contact Center</li> <li>LABCCT-2017 Create and Configure Customer Facing Webex AI Agent in the Contact Center Enterprise</li> <li>LABCOL-1007 Building your first Webex BOT</li> <li>LABCOL-2007 Webex Contact Center with Google CCAI</li> <li>LABCOL-2010 Webex Contact Center: The Skill Queueing Upgrade Your UCCX Migration DESERVES!</li> <li>LABCOL-2011 Dial-plan designs in Cisco Webex Calling</li> <li>LABCOL-1027 Unlock the Power of AI in Webex Contact Center</li> </ul> <p> </p> <p>Breakouts and Labs</p> <ul> <li>LTRCCT-2000 Hands-on AI in Action with Webex Contact Center: Enhancing Self-Service, Agent Assistance &amp; Customer Insights</li> <li>LTRCCT-2016 Extending your Contact Center to the Cloud</li> <li>BRKCCT-2017 Harness the power of AI and digital channels to modernize your customer experience  </li> </ul> <p>Capture the Flag (CTF)</p> <p>Webex Calling</p> <ul> <li>Webex Calling - Hunt Groups, Call Park &amp; Call Pickup</li> <li>Webex Calling - Operating modes and Call Permissions</li> </ul> <p>Webex Contact Center</p> <ul> <li>Webex Contact Center AI Assistant</li> <li>Webex Contact Center Flow Analytics and Supervisor WebRTC</li> <li>Webex Contact Center Native AI &amp; AI Agents</li> </ul> <p>Webex Connect</p> <ul> <li>Webex Connect Digital Channels - SMS and Facebook Messenger</li> <li>Webex Connect Digital Channels - WhatsApp And Web Chat</li> </ul> <p>Webex Suite</p> <ul> <li>Webex Suite - Webex Meetings, Teams and Vidcast AI Features</li> <li>Webex Meetings in Microsoft Teams</li> </ul> <p>TAC and CTF Speaker Sessions</p> <ul> <li>TACCOL-2014 Troubleshooting the Most Common Voice Issues in Webex Contact Center - 06/10/25 @ 11:30 AM</li> <li>TACCOL-2017 Configuration and troubleshooting UCCE/PCCE integration with Webex Connect for Digital Channels - 06/10/25 @ 15:30</li> <li>CTF-1039 Next-Gen Customer Experience: Exploring Webex Contact Center's AI Capabilities - 06/12/25 @ 11:00 AM</li> </ul>"},{"location":"lab1_getting_started/","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#lab-1-getting-started","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#section-1","title":"Section 1","text":"<p>Please use the following credentials to connect to device:</p> <code>IP Address</code> 1.1.1.1 <code>Username</code> admin <code>Password</code> C1sco123 <p>My content</p> <p>Note</p> <p>This is a note</p> <p>Cisco IOS code block:</p> <pre><code>hostname ABC\ninterface GigabitEthernet1\n ip address 122.1.1.1\n</code></pre> <p>Image:</p> <p></p>"},{"location":"lab1_getting_started/#section-2","title":"Section 2","text":"<p>More content</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab session is an intermediate level session intended for engineers with prior Webex Contact Center experience and either basic or no knowledge of the Webex Contact Center integration with Salesforce customer relationship management (CRM) system.</p> <p>In this lab session, you will explore the capabilities of the New Webex Contact Center CRM Connector for Salesforce that enables you to manage voice interactions while accessing customer information within Salesforce. You will gain hands-on experience with seamless screen pops, activity logging, case management, and other features \u2014 all integrated into a streamlined, user-friendly agent interface.</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>This instructional guide is designed to familiarize participants with some of the capabilities of the New Webex Contact Center CRM Connector for Salesforce. While the lab design and configuration examples can serve as a reference, they are not representative of a real-world design; therefore, not all recommended features are utilized or optimally enabled. For design-related questions, please contact your Cisco representative or a Cisco partner.</p>"},{"location":"overview/#lab-topology","title":"Lab Topology","text":"<p>This lab utilizes the Webex Contact Center cloud environment.</p>"},{"location":"task1/","title":"Task 1 - Integrate Webex Contact Center with Saleforce Using the New CRM Connector","text":""},{"location":"task1/#task-1-integrate-webex-contact-center-with-salesforce-using-the-new-crm-connector","title":"Task 1 - Integrate Webex Contact Center with Salesforce Using the New CRM Connector","text":"<p>Please use the following credentials to complete the tasks:</p> <code>Control Hub</code> https://admin.webex.com <code>Salesforce</code> https://login.salesforce.com/ <code>WxCC Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>WxCC Password</code> webexONE1! \ud83d\udccb <code>Salesforce Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>Salesforce Password</code> webexONE1! \ud83d\udccb <p>Task Objectives</p> <ul> <li>Define and configure the Call Center in Salesforce and add users.</li> <li>Create a softphone layout and set screen pop preferences.</li> <li>Add the Webex Contact Center softphone to the Salesforce Sales app.</li> <li>Test the Webex Contact Center softphone integration in Salesforce.</li> </ul>"},{"location":"task1/#section-1-configure-call-center","title":"Section 1 - Configure Call Center","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Navigate to Salesforce portal and log in with the credentials provided.</li> </ul> <p>Note</p> <p>The package for the WxCC V2 Salesforce connector is already pre-installed. In production environments, it will need to be installed manually and can be retrieved from this link.</p> <ul> <li>Visit the Github repository to download the latest call center definition file - https://github.com/webex/webex-contact-center-crm-connectors/blob/main/salesforce/OpenCTI.callCenter-meta.xml (click 'Download raw file button').</li> </ul> <p></p> <ul> <li>In Salesforce, navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'.</li> </ul> <p></p> <ul> <li> <p>In the Salesforce portal, navigate to 'Feature Settings &gt; Service &gt; Call Center &gt; Call Centers' (or type Call Centers in the search bar above the left-hand menu).</p> </li> <li> <p>Select Don't show me this page again and hit Continue.</p> </li> </ul> <p></p> <ul> <li>Click 'Import', select 'Browse' and choose the call center definition file (downloaded earlier).</li> <li>Click 'Import' again to save the added file.</li> </ul> <p> </p> <ul> <li>After the call center definition file is imported, edit it by clicking 'Edit'.</li> <li>Change 'WxCC Region' to 'us1'.</li> </ul> <p>Note</p> <p>The region defined here should match your Webex Contact Center region (i.e. ca1, anz1, eu1 etc.).</p> <p></p> <ul> <li>Click 'Save'.</li> <li>Add users to the Call Center:<ul> <li>Click 'Manage Call Center Users' at the bottom of the page and then 'Add More Users'.</li> <li>Click 'Find', select the lab user in use (labuserID@wx1.wbx.ai), and click 'Add to Call Center'.</li> </ul> </li> </ul> <p> </p>"},{"location":"task1/#section-2-configure-softphone-layout","title":"Section 2 - Configure Softphone Layout","text":"<ul> <li>Navigate to 'Feature Settings &gt; Service &gt; Call Center &gt; Softphone Layouts' (or type Softphone Layouts in the search bar above the left-hand menu).</li> <li>Click 'New'.</li> </ul> <ul> <li>Provide a name for the 'Softphone Layout' (e.g., WxCC layout).</li> <li>Select the 'Is Default Layout' checkbox.</li> <li>Under 'Display these salesforce.com objects', click on 'Add/Remove Objects' and add 'Case'. </li> </ul> <ul> <li>Under 'Screen Pop Settings', expand 'No matching records', select 'Pop to new', and choose 'Contact'.</li> </ul> <p>Note</p> <p>Other Salesforce objects can be selected here as well. 'Contact' is used as an example in this exercise. </p> <ul> <li>Click 'Save' at the top.</li> </ul>"},{"location":"task1/#section-3-configure-cti-softphone","title":"Section 3 - Configure CTI Softphone","text":"<ul> <li>Navigate to 'Apps &gt; App Manager' (or type App Manager in the search bar above the left-hand menu).</li> <li>For the 'Sales' app (line number 18; 'LightningSales' developer) click 'Edit' on the right-hand side.</li> </ul> <ul> <li>In the next window, select 'Utility Items (Desktop Only)'.</li> <li>Click 'Add Utility item' and choose 'Open CTI Softphone'.</li> </ul> <ul> <li>Select 'Add Utility item' and choose 'Omni-Channel'.</li> </ul> <ul> <li>Click 'Save' and return to the previous page by clicking the back arrow icon at the top left corner.</li> </ul>"},{"location":"task1/#section-4-testing","title":"Section 4 - Testing","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>From the Salesforce Home page, click on the 'App Launcher' icon (top left).</li> <li>Search for Sales and click on the 'Sales' option.</li> </ul> <p></p> <ul> <li> <p>Open the Webex Contact Center phone widget (bottom left) and login to Webex Contact Center Agent Desktop using the selected Webex Contact Center user credentials (e.g., labuserID@wx1.wbx.ai):</p> <ul> <li>First time login into agent desktop could prompt you the OAuth2 Consent as shown in the first screenshot below. Hit Accept to continue</li> </ul> <p></p> <ul> <li>For the phone number, select 'Extension' and enter the extension in the format 10NN (where 'NN' is your lab user number, e.g., labuserID@wx1.wbx.ai)':</li> <li>For the team use Salesforce Team. </li> </ul> </li> </ul> <p> </p> <ul> <li>Congratulations! You have complete the task.</li> </ul>"},{"location":"task2/","title":"Task 2 - Integrate Saleforce Connector with WebRTC","text":""},{"location":"task2/#task-2-integrate-salesforce-connector-with-webrtc","title":"Task 2 - Integrate Salesforce Connector with WebRTC","text":"<p>Please use the following credentials to complete the tasks:</p> <code>Control Hub</code> https://admin.webex.com <code>Salesforce</code> https://login.salesforce.com/ <code>WxCC Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>WxCC Password</code> webexONE1! \ud83d\udccb <code>Salesforce Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>Salesforce Password</code> webexONE1! \ud83d\udccb <p>Task Objectives</p> <ul> <li>Login with WebRTC on Salesforce.</li> <li>Troubleshoot and configure the steps needed to enable WebRTC login</li> </ul>"},{"location":"task2/#section-1-using-webrtc-option","title":"Section 1 - Using WebRTC Option","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Navigate to Agent Desktop and select the Avatar on the top right</li> </ul> <p></p> <ul> <li>Navigate to 'Profile Settings &gt; Desktop &gt; Save' (or type Call Centers in the search bar above the left-hand menu).</li> </ul> <p> </p> <ul> <li>Once the Save button is hit, the error message pops up \"WebRTC domain is not configured\" </li> </ul> <p> </p>"},{"location":"task2/#section-2-steps-to-correct-and-enable-webrtc-login","title":"Section 2 - Steps to Correct and Enable WebRTC Login","text":"<ul> <li>In order to mitigate this issue, in Salesforce, navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'.</li> </ul> <ul> <li> <p>On the Salesforce portal, navigate to 'Feature Settings &gt; Service &gt; Call Center &gt; Call Centers' (or type Call Centers in the search bar above the left-hand menu).</p> </li> <li> <p>Click 'Edit' on the the call center definition file <code>WxCC Call Center</code></p> </li> </ul> <p></p> <ul> <li>Enter 'rtw.prod-us1.rtmsprod.net' in the 'WxCC WebRTC Domain'</li> </ul> <p></p> <p>Note</p> <p>The region defined here should match your Webex Contact Center region. Please refer to the Call Center configuration customizations section for the list of the domains for other regions</p> <ul> <li> <p>Click 'Save'.</p> </li> <li> <p>Logout and log back in to salesforce.</p> </li> </ul> <p></p>"},{"location":"task2/#section-3-testing","title":"Section 3 - Testing","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Open the Webex Contact Center phone widget (bottom left) and login to Webex Contact Center Agent Desktop using the selected Webex Contact Center user credentials (e.g., labuserID@wx1.wbx.ai):</li> <li>Enable the microphone option as show below if prompted. </li> </ul> <p> </p> <ul> <li>Navigate to Agent Desktop and select the Avatar on the top right</li> </ul> <p></p> <ul> <li>Notice the agent is now setup with WebRTC </li> </ul> <p></p> <ul> <li>Congratulations! You have complete the task.</li> </ul>"},{"location":"task3/","title":"Task 3 - Presence Synchronization Between Salesforce and Webex Contact Center","text":""},{"location":"task3/#task-3-presence-synchronization-between-salesforce-and-webex-contact-center","title":"Task 3 - Presence Synchronization Between Salesforce and Webex Contact Center","text":"<p>Please use the following credentials to complete the tasks:</p> <code>Control Hub</code> https://admin.webex.com <code>Salesforce</code> https://login.salesforce.com/ <code>WxCC Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>WxCC Password</code> webexONE1! \ud83d\udccb <code>Salesforce Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>Salesforce Password</code> webexONE1! \ud83d\udccb <p>Info</p> <p>Presence is crucial for agent productivity, especially when handling multiple contacts across different platforms.  This task focuses on achieving presence synchronization between Webex Contact Center and Salesforce to ensure agents are utilized efficiently.</p> <p>Task Objectives</p> <ul> <li>Configure Salesforce presence statuses to match Webex Contact Center idle codes.</li> <li>Enable presence statuses for the appropriate user profile.</li> <li>Set up Omni-Channel state synchronization in Webex Contact Center settings.</li> <li>Test state sync between Salesforce Omni-Channel and Webex Contact Center.</li> </ul>"},{"location":"task3/#section-1-create-presence-statuses","title":"Section 1 - Create Presence Statuses","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <p>Note</p> <p>For presence synchronization to work between Salesforce and Webex Contact Center, the idle code names in Webex Contact Center must match the presence state names in Salesforce.</p> <ul> <li>In Salesforce, navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'.</li> </ul> <p></p> <ul> <li>Go to 'Feature Settings &gt; Service &gt; Omni-Channel &gt; Presence Statuses' (or type Presence Statuses in the search bar in the left-hand menu).</li> </ul> <p></p> <ul> <li>Create  two new Presence Statuses:<ul> <li>Click 'New'.</li> <li>Provide the name wxccbusy under 'Status Name' and select 'Busy' under 'Status Options'.</li> <li>Click 'Save' and select `Back to List: Service Presence Statuses'</li> <li>Create another Presence Status with the same options but use sfbusy under 'Status Name'.</li> </ul> </li> </ul> <p> </p>"},{"location":"task3/#section-2-enable-presence-statuses-for-the-user-profile","title":"Section 2 - Enable Presence Statuses for the User Profile","text":"<ul> <li>Navigate to 'Users &gt; Profiles' (or type Profiles in the search bar in the left-hand menu).</li> <li>Locate the 'System Administrator' profile (select <code>Next</code> at the bottom to go to the next page) and click on it (do not click 'Edit').</li> </ul> <p>Note</p> <p>For the purpose of this exercise, the 'System Administrator' profile is used. Under normal circumstances, any other profile may be used by users.</p> <p></p> <ul> <li>In the next window, hover over 'Enabled Service Presence Status Access' and click 'Edit'.</li> </ul> <p></p> <ul> <li>Move sfbusy and wxccbusy from 'Available Service Presence Statuses' to 'Enabled Service Presence Statuses'.</li> </ul> <p></p> <ul> <li>Click 'Save'.</li> </ul>"},{"location":"task3/#section-3-configure-omni-channel-state-sync-in-call-center-settings","title":"Section 3 - Configure Omni-Channel State Sync in Call Center Settings","text":"<ul> <li>Navigate to 'Feature Settings &gt; Service &gt; Call Center &gt; Call Centers' (or type Call Centers in the search bar in the left-hand menu).</li> <li>Click 'Edit' for 'WxCC Call Center'.</li> </ul> <ul> <li>Under 'Omni-Channel State Sync Configuration', do the following:<ul> <li>Set 'Enable Omni-Channel Sync' to true (type it in manually).</li> <li>For 'Omni-Channel Not Ready Reason', type wxccbusy.</li> <li>For 'WxCC Idle Reason Code', type sfbusy.</li> </ul> </li> </ul> <p>Note</p> <p>'Omni-Channel Not Ready Reason' is the name of the Salesforce Omni-Channel \"Busy\" reason status used when the agent receives an inbound call in Webex Contact Center. 'WxCC Idle Reason Code' is the name of the Webex Contact Center Idle code used when the agent receives an inbound chat in Salesforce.</p> <p></p> <ul> <li>Click 'Save'.</li> </ul> <p>Note</p> <p>For the purpose of this lab, the idle code sfbusy has already been created on the Webex Contact Center side.</p>"},{"location":"task3/#section-4-testing-omni-sync-presence","title":"Section 4 - Testing Omni Sync Presence","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Refresh Salesforce by logging out and logging back in (make sure to close any other Salesforce tabs).</li> </ul> <p></p> <p>Reminder</p> <p>Please select the 'Desktop' option for the phone number.</p> <ul> <li>Open the Webex Contact Center widget (Phone) and change the states (e.g., sfbusy, available) \u2014 the Salesforce Omni-Channel widget status should follow accordingly.</li> <li>Test changing the state from the Salesforce Omni-Channel widget \u2014 the Webex Contact Center widget should follow as well.</li> </ul> <p>Note</p> <p>'Omni-Channel Not Ready Reason' is the name of the Salesforce Omni-Channel \"Busy\" reason status used when the agent receives an inbound call in Webex Contact Center. Therefore, the wxccbusy state on the Omni-Channel widget will only appear when an agent is actively engaged in a Webex Contact Center call (this will be tested in the next tasks)</p> <p> </p> <ul> <li>Congratulations! You have completed the task.</li> </ul>"},{"location":"task3/#section-5-troubleshooting-failed-sync-due-to-mismatched-idle-codes","title":"Section 5 - Troubleshooting Failed Sync Due to Mismatched Idle Codes","text":"<ul> <li>In Salesforce, navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'.</li> </ul> <ul> <li> <p>Go to 'Feature Settings &gt; Service &gt; Omni-Channel &gt; Presence Statuses' (or type Presence Statuses in the search bar in the left-hand menu).</p> </li> <li> <p>Select 'Edit' the Presence Status sfbusy created before </p> </li> </ul> <p></p> <ul> <li>Update sfbusy to Sfbusy (capitalizing the letter S) and click 'Save'.</li> </ul> <p></p> <ul> <li>Refresh Salesforce by logging out and logging back in (make sure to close any other Salesforce tabs).</li> </ul> <p></p> <ul> <li>Open the Webex Contact Center widget (Phone) and change the states to 'Available' \u2014 the Salesforce Omni-Channel widget status will be changed to 'Available'</li> </ul> <p></p> <ul> <li>Test changing the state from the Salesforce Omni-Channel widget to Sfbusy and notice thatthe Webex Contact Center widget still shows as  'Available'</li> </ul> <p></p> <p>Reason</p> <p>When presence status on sfbusy is updated to Sfbusy, presence sync becasue idle code on WxCC is sfbusy.  Omni-channel codes created on Salesforce and in Webex Contact Center needs to match in spelling and in case.  Please refer to the Omni-Channel State Sync Configuration section for the external documentation  </p> <ul> <li>Congratulations! You have completed the task.</li> </ul>"},{"location":"task4/","title":"Task 4 - Data Lookup Using CAD Variables","text":""},{"location":"task4/#task-4-data-lookup-using-cad-variables","title":"Task 4 - Data Lookup Using CAD Variables","text":"<p>Please use the following credentials to complete the tasks:</p> <code>Control Hub</code> https://admin.webex.com <code>Salesforce</code> https://login.salesforce.com/ <code>WxCC Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>WxCC Password</code> webexONE1! \ud83d\udccb <code>Salesforce Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>Salesforce Password</code> webexONE1! \ud83d\udccb <p>Info</p> <p>Utilizing CAD (Call-Associated Data) variables passed from Webex Contact Center enables agents to streamline their workflows and operate more efficiently when addressing customer interactions and requests. These variables provide agents with critical information, such as customer details or interaction context, directly within their interface. By having instant access to this data, agents can reduce the need for manual lookups, save time, and deliver a more personalized and effective customer experience. This not only improves agent productivity but also enhances overall customer satisfaction.</p> <p>Task Objectives</p> <ul> <li>Configure Call Center in Salesforce for advanced screen pop functionality.</li> <li>Customize and publish a Webex Contact Center flow with Salesforce integration.</li> <li>Test the integration by triggering a Salesforce contact creation via a phone call.</li> </ul>"},{"location":"task4/#section-1-salesforce-configuration","title":"Section 1 - Salesforce Configuration","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'</li> </ul> <p></p> <ul> <li>Go to 'Feature Settings &gt; Service &gt; Call Center &gt; Call Centers' (or type Call Centers in the search bar in the left-hand menu).</li> <li>Click 'Edit' for 'WxCC Call Center'.</li> </ul> <p></p> <ul> <li>Under 'Advanced Screen Pop Search Configuration', change 'Advanced Screen Pop Enabled' to true (type it in manually).</li> <li>For 'CAD Variable Name', use ani.</li> <li>Under 'Screen Pop Settings for No Record Match', populate 'Object Field Mappings' as follows:</li> </ul> <pre><code>Phone={ani}\n</code></pre> <p></p> <ul> <li>Click 'Save'.</li> </ul>"},{"location":"task4/#section-2-webex-contact-center-configuration","title":"Section 2 - Webex Contact Center Configuration","text":"<ul> <li>Log in to the https://admin.webex.com using the credentials provided at the top of this page.</li> <li>Click on Contact Center in the left-hand side navigation pane of the Webex Control Hub. </li> </ul> <ul> <li>After logging in, navigate to the 'Flows' menu on the left-hand side.</li> </ul> <ul> <li>Search for the flow named WX1_Salesforce_LabuserID (where ID is your selected pod number (01 through 30); i.e. WX1_Salesforce_Labuser02 if selected pod is 2) and open the flow by selecting Go to Flow Designer by clicking the icon on the right. </li> </ul> <ul> <li>Turn edit mode by: 'Edit' is set to 'On'</li> </ul> <ul> <li>Click on an empty space in the flow, then on the right-hand side, scroll down to navigate to 'Custom Variables &gt; Flow Variables' section.</li> <li>Click on sfurl flow variable, select the 'Edit' option (pencil icon), replace NN with the attendee number which is the fully qualified domain name (FQDN) from your Salesforce lab (e.g., wx1-lab01-dev-ed.develop.lightning.force.com;) as the Default Value, and click 'Save'.</li> </ul> <p>Attention</p> <p>The FQDN used for the sfurl variable must end with .lightning.force.com. While logged into the Salesforce portal, you can find the name of the Salesforce organization in the browser's address field. Note that the Salesforce Setup page will have a different domain ending (it does not end with .lightning.force.com). To obtain the correct FQDN, you can either navigate to the Salesforce Sales app and copy the full FQDN from the browser's address field there, or copy the Salesforce organization name from the Salesforce Setup page from the browser's address field and append it with .lightning.force.com.</p> <p> </p> <ul> <li>Turn Flow Validation 'On' by clicking the 'Validation' button at the bottom of the page to publish the flow. Once validation is complete, click 'Publish Flow' and then 'Publish Flow' again in the next dialog box (Latest version label is selected automatically).</li> </ul> <p></p> <ul> <li>Navigate to the 'Channels' menu in the Webex Contact Center configuration.</li> </ul> <p></p> <ul> <li> <p>Open WebexOne_AI_EntryPoint_ID (where 'iD' is your lab user number, e.g., labuser07@wx1.wbx.ai ), verify that your flow is under 'Routing Flow' </p> </li> <li> <p>Note down the 'Support Number' associated with this channel - it will be needed later in this lab for testing. </p> </li> </ul> <p></p>"},{"location":"task4/#section-3-testing","title":"Section 3 - Testing","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Refresh Salesforce by logging out and logging back in (make sure to close any other Salesforce tabs).</li> </ul> <p></p> <ul> <li>Open the Webex Contact Center phone widget and login using the selected Webex Contact Center credentials.</li> <li>For the team use Salesforce Team.</li> </ul> <p>Reminder</p> <p>Please select the 'Desktop' option for the phone number.</p> <p></p> <ul> <li>Make sure that the agent state is set to 'Available' and then call the channel number (noted from the steps above). In the IVR, choose option 4.</li> <li>Since Salesforce does not recognize your number, a new Contact create window will open with the phone number prefilled.</li> <li>Provide a name and save the contact in Salesforce.</li> </ul> <p></p> <ul> <li>End the call.</li> <li>Wrapup the session, make sure that the agent state is set to 'Available' and make another call. In the IVR, choose option 4 again.</li> <li>This time, the system will open the matching contact, as it was created in the previous step.</li> </ul> <p></p> <ul> <li>Congratulations! You have complete the task.</li> </ul>"},{"location":"task5/","title":"Task 5 - Case Lookup Using Custom CAD Variables and Agent Desktop Screen Pop","text":""},{"location":"task5/#task-5-case-lookup-using-custom-cad-variables-and-agent-desktop-screen-pop","title":"Task 5 - Case Lookup Using Custom CAD Variables and Agent Desktop Screen Pop","text":"<p>Please use the following credentials to complete the tasks:</p> <code>Control Hub</code> https://admin.webex.com <code>Salesforce</code> https://login.salesforce.com/ <code>WxCC Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>WxCC Password</code> webexONE1! \ud83d\udccb <code>Salesforce Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>Salesforce Password</code> webexONE1! \ud83d\udccb <p>Info</p> <p>In addition to utilizing global variables collected during the customer's interaction in the Webex Contact Center IVR, this task demonstrates the functionality of the new Webex Contact Center CRM widget for Salesforce with screen pops that operate seamlessly without triggering multiple sign-in alert errors.</p> <p>Task Objectives</p> <ul> <li>Update Salesforce Call Center settings to enable advanced screen pop with the case variable.</li> <li>Test case creation and retrieval in Salesforce via the Webex Contact Center phone widget.</li> <li>Have the case list open in a new tab during case retrieval.</li> </ul>"},{"location":"task5/#section-1-modifying-call-center-options-in-salesforce","title":"Section 1 - Modifying Call Center Options in Salesforce","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'.</li> </ul> <p></p> <ul> <li>Go to 'Feature Settings &gt; Service &gt; Call Center &gt; Call Centers' (or type Call Centers in the search bar in the left-hand menu).</li> <li>Click 'Edit' for 'WxCC Call Center'.</li> </ul> <p></p> <ul> <li> <p>Under 'Advanced Screen Pop Search Configuration', set 'CAD Variable Name' to caseid (type it in manually).</p> </li> <li> <p>Then click 'Save'</p> </li> </ul> <p></p>"},{"location":"task5/#section-2-testing","title":"Section 2 - Testing","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Refresh Salesforce by logging out and logging back in (make sure to close any other Salesforce tabs).</li> </ul> <p></p> <ul> <li>Click on the 'App Launcher' icon (top left).</li> <li>Search for Sales and click on the 'Sales' option.</li> </ul> <p></p> <ul> <li>Open the Webex Contact Center phone widget and login using the selected Webex Contact Center credentials.</li> <li>For the team use Salesforce_Team. </li> </ul> <p>Reminder</p> <p>Please select the 'Desktop' option for the phone number. </p> <p>First call interaction:</p> <ul> <li>Make sure that the agent state is set to 'Available' and then call the channel number (as noted in the Task 4). In the IVR, choose Option 4.</li> <li>After answering the call selct Create a new case (highlitned in green) through the Webex Contact Center widget and note down the case number (highlitned in blue) - it's going to be needed for the second call below.</li> </ul> <p> </p> <ul> <li>End the call.</li> <li>Wrap up the session.</li> <li>Move to the 'Home' tab in Salesforce Sales page.</li> </ul> <p></p> <p>Second call interaction:</p> <ul> <li>Make sure that agent state is set to 'Available' and then call the channel number again. In the IVR, choose Option 5.</li> <li>Provide the case number that was created during the previous call.</li> <li>The existing case should be displayed, and the case list should be displayed in a new tab.</li> <li>Select the Phone icon and the same call will now show in both the tabs</li> </ul> <p>Warning</p> <p>If a new tab did not open with the case list, ensure that it was not blocked by the browser. A notification will appear in the browser indicating that a new tab popup was blocked. Click on the notification and select the tab link to open the new tab.</p> <p></p> <p> </p> <p>The Why of This Exercise</p> <p>In the new salesforce connector we have solved the multi-sign in concerns when agent desktop is logged into 2 seperate tabs</p> <ul> <li>Congratulations! You have complete the task.</li> </ul>"},{"location":"task6/","title":"Task 6 - Automatic New Case Creation Using Custom CAD Variables","text":""},{"location":"task6/#task-6-automatic-new-case-creation-using-custom-cad-variables","title":"Task 6 - Automatic New Case Creation Using Custom CAD Variables","text":"<p>Please use the following credentials to complete the tasks:</p> <code>Control Hub</code> https://admin.webex.com <code>Salesforce</code> https://login.salesforce.com/ <code>WxCC Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>WxCC Password</code> webexONE1! \ud83d\udccb <code>Salesforce Username</code> labuserID@wx1.wbx.ai \ud83d\udccb (where ID is your selected pod number (01 through 30); i.e. labuser02@wx1.wbx.ai if selected pod is 2) <code>Salesforce Password</code> webexONE1! \ud83d\udccb <p>Info</p> <p>This task demonstrates the automatic case creation capability using the new Webex Contact Center (WXCC) Salesforce Connector, leveraging custom CAD variables from Webex Contact Center. In this section we will pass the Call Session ID in the case on salesforce if this needs to be gathered for troubleshooting purposes. </p> <p>Task Objectives</p> <ul> <li>Enable auto case creation via the Salesforce Call Center configuration file.</li> <li>Set up CAD variable field mapping for auto case creation in the Salesforce Call Center settings.</li> <li>Test the auto case creation and CAD variable field mapping.</li> </ul>"},{"location":"task6/#section-1-modifying-call-center-options-in-salesforce","title":"Section 1 - Modifying Call Center Options in Salesforce","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Navigate to 'Setup' by clicking the gear icon in the top-right corner and selecting 'Setup'.</li> </ul> <p></p> <ul> <li>Go to 'Feature Settings &gt; Service &gt; Call Center &gt; Call Centers' (or type Call Centers in the search bar in the left-hand menu).</li> <li>Click 'Edit' for 'WxCC Call Center'.</li> </ul> <p></p> <ul> <li>Under 'Advanced Screen Pop Search Configuration', remove 'CAD Variable Name' value (make it empty).</li> <li>Under 'Case Management', set 'Auto Case Creation For Inbound Calls' to true (type it in manually) and 'Object Field Mappings' as follows and click 'Save': <pre><code>Subject={subject},Description={description}\n</code></pre></li> </ul> <p></p>"},{"location":"task6/#section-2-testing","title":"Section 2 - Testing","text":"<p>Attention</p> <p>Please use the Firefox browser to access, configure, and test within the Salesforce portal.</p> <ul> <li>Refresh Salesforce by logging out and logging back in (make sure to close any other Salesforce tabs).</li> </ul> <p></p> <ul> <li>Click on the 'App Launcher' icon (top left).</li> <li>Search for Sales and click on the 'Sales' option.</li> </ul> <p></p> <ul> <li>Open the Webex Contact Center phone widget and login using the selected Webex Contact Center credentials.</li> <li>For the team use Salesforce Team.</li> </ul> <p>Reminder</p> <p>Please select the 'Desktop' option for the phone number. Use the extension number and team assignment based on your lab user number.</p> <p>Making a test call:</p> <ul> <li>Make sure that agent state is set to 'Available' and then call the channel number (as noted in the Task 4). In the IVR, choose Option 6.</li> <li>Answer the call on the agent desktop</li> <li>A new case is automatically created, and the configured fields are prefilled with the call data.</li> </ul> <p></p> <ul> <li>End the call.</li> </ul> <p>The Why of This Exercise</p> <p>In this section we passed the Call Session ID in the case on salesforce if this needs to be gathered for troubleshooting purposes.</p> <ul> <li>Congratulations! You have complete the task and the lab!</li> </ul>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"howToUse/admonition/","title":"Admonition","text":"<p>In addition to the  stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"customFeatures","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  {{config.extra.repo}}</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> <p>=== \"If you are on a PC\"</p> <pre><code>&gt; In your terminal enter the following commands:\n\n&gt; &lt;copy&gt;python -m venv venv&lt;/copy&gt;\n\n&gt; &lt;copy&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser&lt;/copy&gt;\n\n&gt; &lt;copy&gt;venv\\Scripts\\activate.ps1&lt;/copy&gt;\n\n&gt; &lt;copy&gt;pip install -r requirements.txt&lt;/copy&gt;\n\n&gt; &lt;copy&gt;mkdocs serve&lt;/copy&gt;\n\n&gt; Open a browser to [http://127.0.0.1:8000](http://127.0.0.1:8000){:target=\"_blank\"}\n</code></pre> <p>=== \"If you are on a Mac\"</p> <pre><code>&gt; In your terminal enter the following commands:\n\n&gt; &lt;copy&gt;python -m venv venv&lt;/copy&gt;\n\n&gt; &lt;copy&gt;source venv/bin/activate&lt;/copy&gt;\n\n&gt; &lt;copy&gt;pip install -r requirements.txt&lt;/copy&gt;\n\n&gt; &lt;copy&gt;mkdocs serve&lt;/copy&gt;\n\n&gt; Open a browser to [http://127.0.0.1:8000](http://127.0.0.1:8000){:target=\"_blank\"}\n</code></pre>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> <p>=== \"If you are on a PC\"     &gt; In your terminal enter the following commands:</p> <pre><code>&gt; &lt;copy&gt;venv\\Scripts\\activate.ps1&lt;/copy&gt;\n\n&gt; &lt;copy&gt;mkdocs serve&lt;/copy&gt;\n\n&gt; Open a browser to [http://127.0.0.1:8000](http://127.0.0.1:8000){:target=\"_blank\"}\n</code></pre> <p>=== \"If you are on a Mac\"     &gt; In your terminal enter the following commands:</p> <pre><code>&gt; &lt;copy&gt;source venv/bin/activate&lt;/copy&gt;\n\n&gt; &lt;copy&gt;mkdocs serve&lt;/copy&gt;\n\n&gt; Open a browser to [http://127.0.0.1:8000](http://127.0.0.1:8000){:target=\"_blank\"}\n</code></pre>"},{"location":"howToUse/references/","title":"References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing Your Changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""}]}